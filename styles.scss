$grid-columns: 12;

$breakpoints: (
  sm: 544px,
  md: 768px,
  lg: 992px,
  xl: 1366px
);
$breakpoints-max: (
  sm: (map-get($breakpoints, md)-1),
  md: (map-get($breakpoints, lg)-1),
  lg: (map-get($breakpoints, xl)-1)
);

@mixin bp($breakpoint, $type: 'up') {
  @if map-has-key($breakpoints, $breakpoint) {
    @if $type == 'up' {
      @media (min-width: map-get($breakpoints, $breakpoint ) ) {
        @content;
      }
    }
    @if $type == 'down' {
      @media (max-width: (map-get($breakpoints, $breakpoint ))-1 ) {
        @content;
      }
    }
    @if $type == 'only' and $breakpoint != 'xl' {
      @media (min-width: map-get($breakpoints, $breakpoint) ) and ( max-width: map-get($breakpoints-max, $breakpoint) ) {
        @content;
      }
    }
    @if $type == 'only' and $breakpoint == 'xl' {
      @media (min-width: map-get($breakpoints, $breakpoint ) ) {
        @content;
      }
      @warn "xl only not available as there is no max value defaulting to xl up"
    }
  }
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
      + "Please make sure it is defined in `$breakpoints` map.";
  }
}

@mixin calc-grid-column($index, $class) {
  .col-#{$class}-#{$index} {
    width: percentage(($index / $grid-columns));
  }
}

@mixin loop-grid-columns($columns, $class) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class);
  }
}

@mixin make-grid($class) {
  @include loop-grid-columns($grid-columns, $class);
}

// Will spit out all the column size classes

@include make-grid(xs);

@include bp(sm) {
  @include make-grid(sm);
}

@include bp(md) {
  @include make-grid(md);
}

@include bp(lg) {
  @include make-grid(lg);
}

@include bp(xl) {
  @include make-grid(xl);
}

@mixin clearfix() {
  &:after {
    content: '';
    display: table;
    clear: both;
  }
  *zoom: 1;
}

%clearfix {
  @include clearfix();
}

// Needs box-sizing to work

html {
  box-sizing: border-box;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}

html, body {
  padding: 0;
  margin: 0;
}

// layout

.wrapper {
  @extend %clearfix;
  margin-left: auto;
  margin-right: auto;
  // max-width: 400px;
  @include bp(sm) {
    max-width: map-get($breakpoints, sm);
  }
  @include bp(md) {
    max-width: map-get($breakpoints, md);
  }
  @include bp(lg) {
    max-width: map-get($breakpoints, lg);
  }
  @include bp(xl) {
    max-width: 1140px; // max-width for site on large screens
  }
}

.container {
  @extend %clearfix;
  margin-left: auto;
  margin-right: auto;
}

.row {
  @extend %clearfix;
  margin-left: -6px;
  margin-right: -6px;
  @include bp(sm) {
    margin-left: -10px;
    margin-right: -10px;
  }
  @include bp(md) {
    margin-left: -12px;
    margin-right: -12px;
  }
  @include bp(lg) {
    margin-left: -15px;
    margin-right: -15px;
  }
}

// Keeping seperate col class so I can adjust padding at various breakpoints
.col {
  @extend %clearfix;
  float: left;
  position: relative;
  min-height: 1px;
}

.wrapper,
.container,
.col {
  padding-left: 6px;
  padding-right: 6px;
  @include bp(sm) {
    padding-left: 10px;
    padding-right: 10px;
  }
  @include bp(md) {
    padding-left: 12px;
    padding-right: 12px;
  }
  @include bp(lg) {
    padding-left: 15px;
    padding-right: 15px;
  }
}

// TODO: Add helper classes for vertical padding

img {
  border: 0 none;
}

img,
iframe {
  max-width: 100%;
}

.pull-left {
  float: left !important;
}

.pull-right {
  float: right !important;
}
